/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 03 05:11:26 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "", "");
      appt0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(0, 1554, 0, 0, 0, "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      int[] intArray0 = new int[1];
      appt0.setRecurrence(intArray0, 787, 68, 1911);
      appt0.isRecurring();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "", "");
      appt0.setStartMonth(8);
      appt0.setStartDay(30);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(24, 24, 10, 4, 10, "Gj//.M", "8r4}6u;cgwqZ;:");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 6, 4, "tuo%rEjD?[9NI,Ee", "pm");
      appt0.getValid();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      appt0.setTitle("TY");
      appt0.getTitle();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(0, 1554, 0, 0, 0, "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)", "javax.xml.datatype.Duration#isSet(DatatypeConstants.Field field)");
      appt0.getStartYear();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt(89, 89, (-830), 0, (-585), "TooLarge", "");
      appt0.getStartYear();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(982, 0, 90, 0, (-1543), (String) null, (String) null);
      appt0.getStartMonth();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, ", ", "");
      appt0.getStartMinute();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(11, (-1212), (-1212), 11, (-1212), (String) null, (String) null);
      appt0.setStartMinute(11);
      appt0.getStartMinute();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      appt0.getStartHour();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(1985, 1985, 122, 11, 513, "W4*hk3-oBvz^En1", "X7'yNRL%I_y");
      appt0.getStartHour();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, ", ", "");
      appt0.getStartDay();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, 2628, 1, 10);
      int int0 = appt0.getRecurNumber();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, 2628, 1, 10);
      int int0 = appt0.getRecurIncrement();
      assertEquals(10, appt0.getRecurNumber());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, ", ", "");
      appt0.setRecurrence((int[]) null, 0, (-1154), 0);
      int int0 = appt0.getRecurIncrement();
      assertEquals((-1154), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, 2628, 1, 10);
      appt0.getRecurDays();
      assertEquals(10, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, ", ", "");
      appt0.setRecurrence((int[]) null, 0, (-1154), 0);
      int int0 = appt0.getRecurBy();
      assertEquals(-1154, appt0.getRecurIncrement());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      int[] intArray0 = new int[6];
      appt0.setRecurrence(intArray0, (-219), 2628, 10);
      int int0 = appt0.getRecurBy();
      assertEquals((-219), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 4, "tuo%rEjD?[9NI,Ee", "pm");
      String string0 = appt0.getDescription();
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(4, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("tuo%rEjD?[9NI,Ee", appt0.getTitle());
      assertEquals("pm", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(4863, 4863, 4863, 0, 0, " at ", " at ");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMonth(3248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 13, 11, 517, "?d(", "?d(");
      int[] intArray0 = new int[2];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CalendarUtil.DaysInMonth = null;
      Appt appt0 = null;
      try {
        appt0 = new Appt(23, 23, 1101, 1101, 24, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt((-989), (-989), (-989), (-989), (-989), "+`F*1>u=q6/TQ/5,Aj{", "+`F*1>u=q6/TQ/5,Aj{");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -989
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(0, 90, 4, 0, 0, "x{Yk", "x{Yk");
      // Undeclared exception!
      try { 
        appt0.setStartMonth(2655);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2655
         //
         assertThrownBy("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-1), "y@M]U?H", "y@M]U?H");
      appt0.setDescription("2%j5+1Vcii");
      assertEquals("2%j5+1Vcii", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(11, (-1212), (-1212), 11, (-1212), (String) null, (String) null);
      appt0.setDescription((String) null);
      assertEquals(-1212, appt0.getStartYear());
      assertEquals(-1212, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(11, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-1212, appt0.getStartDay());
      assertEquals(11, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt((-1), (-1), (-888), 0, (-1), "am", "am");
      appt0.setTitle("am");
      assertEquals(0, appt0.getStartMonth());
      assertEquals("am", appt0.getDescription());
      assertEquals(-1, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-888, appt0.getStartDay());
      assertEquals(-1, appt0.getStartHour());
      assertEquals(-1, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt((-1), (-1), (-888), 0, (-1), "am", "am");
      int int0 = appt0.getStartMinute();
      assertEquals((-1), int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-1, appt0.getStartYear());
      assertEquals(-1, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-888, appt0.getStartDay());
      assertEquals("am", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals("am", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt((-1), (-1), (-888), 0, (-1), "am", "am");
      int int0 = appt0.getStartHour();
      assertEquals(0, appt0.getStartMonth());
      assertEquals(-1, appt0.getStartYear());
      assertEquals((-1), int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(-888, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("am", appt0.getDescription());
      assertEquals(-1, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 6, 6, (String) null, (String) null);
      int int0 = appt0.getStartMonth();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(6, appt0.getStartYear());
      assertEquals(6, appt0.getStartHour());
      assertEquals(6, int0);
      assertEquals(6, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(6, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      int int0 = appt0.getStartYear();
      assertEquals(10, appt0.getStartDay());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(10, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt(1146, (-3217), 2635, 1, 0, "[-'=93xv%-f'xaQda", "[-'=93xv%-f'xaQda");
      boolean boolean0 = appt0.getValid();
      assertEquals("[-'=93xv%-f'xaQda", appt0.getDescription());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(-3217, appt0.getStartMinute());
      assertFalse(boolean0);
      assertEquals(1146, appt0.getStartHour());
      assertEquals(2635, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      appt0.getTitle();
      assertEquals(10, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertEquals(10, appt0.getStartDay());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(10, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      appt0.getDescription();
      assertTrue(appt0.getValid());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(10, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(10, int0);
      assertEquals(10, appt0.getStartYear());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      String string0 = appt0.toString();
      assertEquals(2, appt0.getRecurBy());
      assertEquals("\t10/10/10 at 12:10am ,, \n", string0);
      assertEquals(0, appt0.getRecurIncrement());
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt(23, 1, 23, 1, 23, "TooLarge", "TooLarge");
      String string0 = appt0.toString();
      assertEquals(2, appt0.getRecurBy());
      assertEquals("\t1/23/23 at 11:1pm ,TooLarge, TooLarge\n", string0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 6, 4, "tuo%rEjD?[9NI,Ee", "pm");
      appt0.setRecurrence((int[]) null, 268, 3, (-1805));
      boolean boolean0 = appt0.isRecurring();
      assertEquals(3, appt0.getRecurIncrement());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt(0, 136, 0, 0, 0, "$K!U*", "$K!U*");
      boolean boolean0 = appt0.isRecurring();
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertFalse(boolean0);
      assertEquals(0, appt0.getStartDay());
      assertEquals(136, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 6, 4, "tuo%rEjD?[9NI,Ee", "pm");
      appt0.setRecurrence((int[]) null, 269, 3, (-1805));
      int int0 = appt0.getRecurNumber();
      assertEquals(269, appt0.getRecurBy());
      assertEquals((-1805), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, (String) null);
      appt0.setTitle((String) null);
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      appt0.setStartMonth(0);
      appt0.toString();
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt(3, (-2292), 3, 3, 60, "", "--");
      appt0.setStartDay(1004);
      appt0.setStartMinute(60);
      assertEquals(60, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt((-1011), (-1011), (-1011), 0, (-1011), ", ", ", ");
      int int0 = appt0.getStartDay();
      assertEquals(", ", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(-1011, appt0.getStartHour());
      assertEquals(-1011, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(-1011, appt0.getStartMinute());
      assertEquals((-1011), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(12, 1, 12, 1, 12, "TooLarge", "TooLarge");
      int[] intArray0 = appt0.getRecurDays();
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals(12, appt0.getStartYear());
      assertEquals(12, appt0.getStartHour());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("TooLarge", appt0.getTitle());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(12, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      int int0 = appt0.getRecurBy();
      assertEquals(2, int0);
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(10, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(10, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      appt0.setStartYear(10);
      assertEquals(10, appt0.getStartMonth());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(10, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(10, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Appt appt0 = new Appt(12, 1, 12, 1, 12, "TooLarge", "TooLarge");
      appt0.setStartHour(12);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(12, appt0.getStartYear());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(1, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(12, appt0.getStartHour());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("TooLarge", appt0.getDescription());
      assertEquals(12, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Appt appt0 = new Appt(0, 10, 10, 10, 10, "", "");
      int int0 = appt0.getRecurIncrement();
      assertEquals(10, appt0.getStartMonth());
      assertEquals(10, appt0.getStartDay());
      assertEquals(10, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
      assertEquals(10, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Appt appt0 = new Appt(12, 1, 12, 1, 12, "TooLarge", "TooLarge");
      String string0 = appt0.toString();
      assertEquals("\t1/12/12 at 12:1pm ,TooLarge, TooLarge\n", string0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 6, 4, "tuo%rEjD?[9NI,Ee", "pm");
      int int0 = appt0.getRecurNumber();
      assertEquals(6, appt0.getStartHour());
      assertEquals(0, int0);
      assertEquals(4, appt0.getStartYear());
      assertEquals("tuo%rEjD?[9NI,Ee", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals(6, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(6, appt0.getStartMinute());
      assertEquals("pm", appt0.getDescription());
  }
}
